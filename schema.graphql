### This file was autogenerated by GraphQL Nexus
### Do not make changes to this file directly


input IntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: Int
  notIn: [Int!]
}

type Mutation {
  createPokemon(data: pokemonCreateInput!): pokemon!
  deleteMany(where: pokemonWhereInput): pokemon!
  deleteOnepokemon(where: pokemonWhereUniqueInput!): pokemon
  updateMany(data: pokemonUpdateManyMutationInput!, where: pokemonWhereInput): pokemon!
  updateOnepokemon(data: pokemonUpdateInput!, where: pokemonWhereUniqueInput!): pokemon
  upsertOnepokemon(create: pokemonCreateInput!, update: pokemonUpdateInput!, where: pokemonWhereUniqueInput!): pokemon!
}

enum OrderByArg {
  asc
  desc
}

type pokemon {
  id: Int!
  name: String!
  pokedex: Int!
  type: String!
}

input pokemonCreateInput {
  name: String!
  pokedex: Int!
  type: String!
}

input pokemonOrderByInput {
  id: OrderByArg
  name: OrderByArg
  pokedex: OrderByArg
  type: OrderByArg
}

input pokemonUpdateInput {
  id: Int
  name: String
  pokedex: Int
  type: String
}

input pokemonUpdateManyMutationInput {
  id: Int
  name: String
  pokedex: Int
  type: String
}

input pokemonWhereInput {
  AND: [pokemonWhereInput!]
  id: IntFilter
  name: StringFilter
  NOT: [pokemonWhereInput!]
  OR: [pokemonWhereInput!]
  pokedex: IntFilter
  type: StringFilter
}

input pokemonWhereUniqueInput {
  id: Int
  name: String
  pokedex: Int
}

type Query {
  pokemon(cursor: pokemonWhereUniqueInput, orderBy: pokemonOrderByInput, skip: Int, take: Int, where: pokemonWhereInput): [pokemon!]!
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: String
  notIn: [String!]
  startsWith: String
}

type Subscription {
  newPokemon: pokemon!
}
