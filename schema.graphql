### This file was autogenerated by GraphQL Nexus
### Do not make changes to this file directly


input FloatFilter {
  equals: Float
  gt: Float
  gte: Float
  in: [Float!]
  lt: Float
  lte: Float
  not: Float
  notIn: [Float!]
}

type Mutation {
  createPokemon(data: pokemonCreateInput!): pokemon!
  deleteMany(where: pokemonWhereInput): pokemon!
  deleteOnepokemon(where: pokemonWhereUniqueInput!): pokemon
  updateMany(data: pokemonUpdateManyMutationInput!, where: pokemonWhereInput): pokemon!
  updateOnepokemon(data: pokemonUpdateInput!, where: pokemonWhereUniqueInput!): pokemon
  upsertOnepokemon(create: pokemonCreateInput!, update: pokemonUpdateInput!, where: pokemonWhereUniqueInput!): pokemon!
}

enum OrderByArg {
  asc
  desc
}

type pokemon {
  id: String!
  name: String!
  pokedex: Float!
  type: String!
}

input pokemonCreateInput {
  id: String
  name: String!
  pokedex: Float!
  type: String!
}

input pokemonOrderByInput {
  id: OrderByArg
  name: OrderByArg
  pokedex: OrderByArg
  type: OrderByArg
}

input pokemonUpdateInput {
  id: String
  name: String
  pokedex: Float
  type: String
}

input pokemonUpdateManyMutationInput {
  id: String
  name: String
  pokedex: Float
  type: String
}

input pokemonWhereInput {
  AND: [pokemonWhereInput!]
  id: StringFilter
  name: StringFilter
  NOT: [pokemonWhereInput!]
  OR: [pokemonWhereInput!]
  pokedex: FloatFilter
  type: StringFilter
}

input pokemonWhereUniqueInput {
  id: String
  name: String
}

type Query {
  pokemon(cursor: pokemonWhereUniqueInput, orderBy: pokemonOrderByInput, skip: Int, take: Int, where: pokemonWhereInput): [pokemon!]!
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: String
  notIn: [String!]
  startsWith: String
}

type Subscription {
  newPokemon: pokemon!
}
